from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from typing import List
import logging
from data.module1.vocabulary import VOCABULARY
from data.module1.grammar import GRAMMAR_TOPICS
from data.module1.exercises import GRAMMAR_EXERCISES
from gtts import gTTS
import os
import tempfile

logger = logging.getLogger(__name__)

async def handle_modules(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –º–æ–¥—É–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    try:
        keyboard = [
            [InlineKeyboardButton("Module 1: School Days", callback_data="module_1"),
             InlineKeyboardButton("Module 2: Family Moments", callback_data="module_2")],
            [InlineKeyboardButton("Module 3: All the Things I Like", callback_data="module_3"),
             InlineKeyboardButton("Module 4: Come in and Play!", callback_data="module_4")],
            [InlineKeyboardButton("Module 5: Furry Friends", callback_data="module_5"),
             InlineKeyboardButton("Module 6: Home Sweet Home", callback_data="module_6")],
            [InlineKeyboardButton("Module 7: A Day Off", callback_data="module_7"),
             InlineKeyboardButton("Module 8: Day by Day", callback_data="module_8")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥—É–ª–µ–π: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_module_callback(update: Update, context: CallbackContext, callback_parts: List[str]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —á–∞—Å—Ç–∏ callback: {callback_parts}")
        
        if len(callback_parts) >= 3:
            module_id = int(callback_parts[1])
            action = callback_parts[2]

            if action == "grammar":
                if len(callback_parts) == 3:
                    await handle_module_grammar(update, context, module_id)
                elif len(callback_parts) >= 4:
                    topic_parts = callback_parts[3:]
                    if 'exercise' in topic_parts:
                        exercise_index = topic_parts.index('exercise')
                        topic_id = '_'.join(topic_parts[:exercise_index])
                        await handle_grammar_exercise(update, context, module_id, topic_id)
                    else:
                        topic_id = '_'.join(topic_parts)
                        await handle_grammar_topic(update, context, module_id, topic_id)

            elif action == "vocab":
                if len(callback_parts) == 3:
                    await handle_module_vocabulary(update, context, module_id)
                else:
                    category_parts = callback_parts[3:]
                    if any(action in category_parts for action in ['prev', 'next', 'audio']):
                        action_index = next(i for i, part in enumerate(category_parts) 
                                         if part in ['prev', 'next', 'audio'])
                        category_id = '_'.join(category_parts[:action_index])
                        word_index = int(category_parts[-1])
                        await handle_module_vocabulary_category(
                            update, context, module_id, category_id, word_index
                        )
                    else:
                        category_id = '_'.join(category_parts)
                        await handle_module_vocabulary_category(
                            update, context, module_id, category_id
                        )

        elif len(callback_parts) >= 2:
            module_id = int(callback_parts[1])
            await handle_specific_module(update, context, module_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_module_callback: {e}")
        if "Message is not modified" not in str(e):
            raise

async def handle_grammar_topic(update: Update, context: CallbackContext, module_id: int, topic_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º—É"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.grammar import GRAMMAR_TOPICS
        elif module_id == 2:
            from data.module2.grammar import GRAMMAR_TOPICS
        elif module_id == 3:
            from data.module3.grammar import GRAMMAR_TOPICS
        elif module_id == 4:
            from data.module4.grammar import GRAMMAR_TOPICS
        elif module_id == 5:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—è—Ç–æ–≥–æ –º–æ–¥—É–ª—è
            from data.module5.grammar import GRAMMAR_TOPICS
        elif module_id == 6:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —à–µ—Å—Ç–æ–≥–æ –º–æ–¥—É–ª—è
            from data.module6.grammar import GRAMMAR_TOPICS
        elif module_id == 7:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ–¥—å–º–æ–≥–æ –º–æ–¥—É–ª—è
            from data.module7.grammar import GRAMMAR_TOPICS
        elif module_id == 8:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–æ—Å—å–º–æ–≥–æ –º–æ–¥—É–ª—è
            from data.module8.grammar import GRAMMAR_TOPICS
        else:
            await query.message.edit_text(
                "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")
                ]])
            )
            return
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–µ–º–∞: {topic_id}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {list(GRAMMAR_TOPICS.keys())}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º topic_id
        normalized_topic_id = topic_id.lower().replace(' ', '_')
        logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π topic_id: {normalized_topic_id}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ç–µ–º
        topic_mapping = {
            'present': 'present_simple',
            'present_simple': 'present_simple',
            'have': 'have_has',
            'have_has': 'have_has',
            'have_has_got': 'have_has',
            'possessive': 'possessive',
            'plural': 'plural',
            'prepositions': 'prepositions',
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–º –≤—Ç–æ—Ä–æ–≥–æ –º–æ–¥—É–ª—è
            'articles': 'articles',
            'there_is': 'there_is',
            'adjectives': 'adjectives',
            'possessive_s': 'possessive_s',
            'like_dislike': 'like_dislike',
            'present_continuous': 'present_continuous',
            'food_drinks': 'food_drinks',
            'would_like': 'would_like',
            'some_any': 'some_any',
            'can_ability': 'can_ability',
            'prepositions_time': 'prepositions_time',
            'lets': 'lets',
            'imperatives': 'imperatives',
            'must': 'must',
            'have_got': 'have_got',
            'can_animals': 'can_animals',
            'this_that_animals': 'this_that_animals',
            'adjectives_animals': 'adjectives_animals',
            'numbers_20_50': 'numbers_20_50',
            'there_is_are': 'there_is_are',
            'prepositions_place': 'prepositions_place',
            'plural_house': 'plural_house',
            'possessive_house': 'possessive_house',
            'how_many': 'how_many',
            'present_simple_daily': 'present_simple_daily',
            'adverbs_frequency': 'adverbs_frequency',
            'daily_routine': 'daily_routine',
            'time_expressions': 'time_expressions',
            'what_time': 'what_time',
            # –î–æ–±–∞–≤–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            'present_simple': 'present_simple_daily',
            'adverbs': 'adverbs_frequency',
            'routine': 'daily_routine',
            'time': 'time_expressions'
        }
        
        actual_topic_id = topic_mapping.get(normalized_topic_id, normalized_topic_id)
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π topic_id: {actual_topic_id}")
            
        topic_data = GRAMMAR_TOPICS.get(actual_topic_id)
        if not topic_data:
            logger.error(f"–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {actual_topic_id}")
            await query.message.edit_text(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Ç–µ–º–∞–º", callback_data=f"module_{module_id}_grammar")
                ]])
            )
            return

        text = f"üìù {topic_data['title']}\n\n"
        text += f"‚ÑπÔ∏è {topic_data['description']}\n\n"
        
        text += "üìö –ü—Ä–∞–≤–∏–ª–∞:\n"
        for rule in topic_data['rules']:
            text += f"‚Ä¢ {rule}\n"
        
        text += "\n‚úèÔ∏è –ü—Ä–∏–º–µ—Ä—ã:\n"
        for example in topic_data['examples']:
            text += f"‚Ä¢ {example}\n"

        keyboard = [
            [InlineKeyboardButton("‚úçÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data=f"module_{module_id}_grammar_{actual_topic_id}_exercise")],
            [InlineKeyboardButton("üîô –ö —Ç–µ–º–∞–º", callback_data=f"module_{module_id}_grammar")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã: {e}")
        raise

async def handle_grammar_exercise(update: Update, context: CallbackContext, module_id: int, topic_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ"""
    query = update.callback_query
    await query.answer()

    try:
        if module_id == 1:
            exercises = GRAMMAR_EXERCISES.get(topic_id)
            if not exercises:
                await query.message.edit_text(
                    "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ö —Ç–µ–º–µ", callback_data=f"module_{module_id}_grammar_{topic_id}")
                    ]])
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
            exercise_num = context.user_data.get(f'grammar_exercise_{topic_id}', 0)
            if exercise_num >= len(exercises['exercises']):
                exercise_num = 0

            exercise = exercises['exercises'][exercise_num]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            text = f"‚úçÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise_num + 1}/{len(exercises['exercises'])}\n\n"
            text += f"üìù {exercise['question']}\n\n"

            keyboard = []
            if exercise['type'] == 'choice':
                # –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
                for i, option in enumerate(exercise['options']):
                    keyboard.append([
                        InlineKeyboardButton(
                            option,
                            callback_data=f"module_{module_id}_grammar_{topic_id}_answer_{exercise_num}_{i}"
                        )
                    ])
            else:
                # –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
                text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç"
                context.user_data['expecting_answer'] = {
                    'module': module_id,
                    'topic': topic_id,
                    'exercise': exercise_num
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.extend([
                [InlineKeyboardButton("‚óÄÔ∏è –ö —Ç–µ–º–µ", callback_data=f"module_{module_id}_grammar_{topic_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_grammar_exercise_answer(update: Update, context: CallbackContext, module_id: int, topic_id: str, exercise_num: int, answer: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        exercise = GRAMMAR_EXERCISES[topic_id]['exercises'][exercise_num]
        is_correct = False

        if exercise['type'] == 'choice':
            is_correct = int(answer) == exercise['correct']
        else:
            is_correct = answer.lower().strip() == exercise['correct'].lower().strip()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
        text += f"üí° {exercise['explanation']}"

        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", 
                callback_data=f"module_{module_id}_grammar_{topic_id}_exercise_{exercise_num + 1}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ö —Ç–µ–º–µ", callback_data=f"module_{module_id}_grammar_{topic_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_module_vocabulary_category(update: Update, context: CallbackContext, module_id: int, category_id: str, word_index: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'classroom': 'classroom_objects',
                'language': 'classroom_language',
                'classroom_language': 'classroom_language',
                'classroom_objects': 'classroom_objects',
                'school_subjects': 'school_subjects',
                'numbers': 'numbers'
            }
        elif module_id == 2:
            from data.module2.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'family': 'family_members',
                'family_members': 'family_members',
                'appearance': 'appearance',
                'activities': 'family_activities',
                'family_activities': 'family_activities',
                'home': 'home'
            }
        elif module_id == 3:
            from data.module3.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'food': 'food_drinks',
                'food_drinks': 'food_drinks',
                'meals': 'meals',
                'likes': 'likes_dislikes',
                'likes_dislikes': 'likes_dislikes',
                'food_types': 'food_types',
                'types': 'food_types'
            }
        elif module_id == 4:
            from data.module4.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'toys': 'toys',
                'games': 'games',
                'playground': 'playground',
                'actions': 'actions',
                'play': 'actions',
                'game': 'games'
            }
        elif module_id == 5:
            from data.module5.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—è—Ç–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'pets': 'pets',
                'wild': 'wild_animals',
                'wild_animals': 'wild_animals',
                'body': 'animal_body',
                'animal_body': 'animal_body',
                'actions': 'animal_actions',
                'animal_actions': 'animal_actions',
                'habitats': 'animal_habitats',
                'animal_habitats': 'animal_habitats'
            }
        elif module_id == 6:
            from data.module6.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —à–µ—Å—Ç–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'rooms': 'rooms',
                'furniture': 'furniture',
                'items': 'household_items',
                'household': 'household_items',
                'household_items': 'household_items',
                'appliances': 'appliances',
                'prepositions': 'prepositions',
                'place': 'prepositions'
            }
        elif module_id == 7:
            from data.module7.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–µ–¥—å–º–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'leisure': 'leisure',
                'activities': 'activities',
                'weekend': 'weekend',
                'sports': 'sports',
                'entertainment': 'entertainment',
                'hobby': 'activities',
                'free': 'weekend',
                'free_time': 'weekend',
                'sport': 'sports',
                'fun': 'entertainment'
            }
        elif module_id == 8:
            from data.module8.vocabulary import VOCABULARY
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤–æ—Å—å–º–æ–≥–æ –º–æ–¥—É–ª—è
            category_mapping = {
                'routine': 'daily_routine',
                'daily_routine': 'daily_routine',
                'time': 'time_words',
                'time_words': 'time_words',
                'activities': 'daily_activities',
                'daily_activities': 'daily_activities',
                'frequency': 'frequency',
                'periods': 'time_periods',
                'time_periods': 'time_periods',
                'day': 'time_periods'
            }
        else:
            await query.message.edit_text(
                "–°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")
                ]])
            )
            return
            
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(VOCABULARY.keys())}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        actual_category_id = category_mapping.get(category_id, category_id)
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π category_id: {actual_category_id}")
        
        category = VOCABULARY.get(actual_category_id)
        if not category:
            logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {actual_category_id}")
            await query.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ª–æ–≤–∞—Ä—é", callback_data=f"module_{module_id}_vocab")
                ]])
            )
            return

        words = category['words']
        total_words = len(words)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞
        if 'next' in query.data:
            word_index += 1
        elif 'prev' in query.data:
            word_index -= 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–∞
        if word_index < 0:
            word_index = 0
        if word_index >= total_words:
            word_index = total_words - 1

        word_data = words[word_index]
        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if word_index > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", 
                    callback_data=f"module_{module_id}_vocab_{actual_category_id}_prev_{word_index}"
                )
            )
        if word_index < total_words - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", 
                    callback_data=f"module_{module_id}_vocab_{actual_category_id}_next_{word_index}"
                )
            )
        if nav_buttons:
            keyboard.append(nav_buttons)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(
                "üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ", 
                callback_data=f"module_{module_id}_vocab_{actual_category_id}_audio_{word_index}"
            )
        ])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
        keyboard.extend([
            [InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"module_{module_id}_vocab")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        text = (
            f"üìù –°–ª–æ–≤–æ: {word_data['word']}\n"
            f"üîä –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [{word_data['transcription']}]\n"
            f"üî§ –ü–µ—Ä–µ–≤–æ–¥: {word_data['translation']}\n"
            f"üìã –ü—Ä–∏–º–µ—Ä: {word_data['example']}\n\n"
            f"–°–ª–æ–≤–æ {word_index + 1} –∏–∑ {total_words}"
        )

        try:
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(text, reply_markup=reply_markup)
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise

        if 'audio' in query.data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
            audio_path = await get_word_audio(word_data['word'])
            if audio_path:
                try:
                    with open(audio_path, 'rb') as audio_file:
                        await query.message.reply_voice(audio_file)
                    os.remove(audio_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
                    await query.answer("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            else:
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ")
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–≤–∞: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_specific_module(update: Update, context: CallbackContext, module_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    try:
        keyboard = [
            [
                InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å", callback_data=f"module_{module_id}_vocab"),
                InlineKeyboardButton("üìù –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data=f"module_{module_id}_grammar")
            ],
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—è–º", callback_data="modules")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"üìö –ú–æ–¥—É–ª—å {module_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥—É–ª—è {module_id}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_module_vocabulary(update: Update, context: CallbackContext, module_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–ª–æ–≤–∞—Ä—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.vocabulary import VOCABULARY
        elif module_id == 2:
            from data.module2.vocabulary import VOCABULARY
        elif module_id == 3:
            from data.module3.vocabulary import VOCABULARY
        elif module_id == 4:
            from data.module4.vocabulary import VOCABULARY
        elif module_id == 5:
            from data.module5.vocabulary import VOCABULARY
        elif module_id == 6:
            from data.module6.vocabulary import VOCABULARY
        elif module_id == 7:
            from data.module7.vocabulary import VOCABULARY
        elif module_id == 8:
            from data.module8.vocabulary import VOCABULARY
        else:
            await query.message.edit_text(
                "–°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")
                ]])
            )
            return

        keyboard = []
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
        for category_id, category_data in VOCABULARY.items():
            keyboard.append([
                InlineKeyboardButton(
                    category_data['title'],
                    callback_data=f"module_{module_id}_vocab_{category_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.extend([
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìö –°–ª–æ–≤–∞—Ä—å –º–æ–¥—É–ª—è {module_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–≤–∞—Ä—è –º–æ–¥—É–ª—è {module_id}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_module_grammar(update: Update, context: CallbackContext, module_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.grammar import GRAMMAR_TOPICS
        elif module_id == 2:
            from data.module2.grammar import GRAMMAR_TOPICS
        elif module_id == 3:
            from data.module3.grammar import GRAMMAR_TOPICS
        elif module_id == 4:
            from data.module4.grammar import GRAMMAR_TOPICS
        elif module_id == 5:
            from data.module5.grammar import GRAMMAR_TOPICS
        elif module_id == 6:
            from data.module6.grammar import GRAMMAR_TOPICS
        elif module_id == 7:
            from data.module7.grammar import GRAMMAR_TOPICS
        elif module_id == 8:
            from data.module8.grammar import GRAMMAR_TOPICS
        else:
            await query.message.edit_text(
                "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")
                ]])
            )
            return

        keyboard = []
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã
        for topic_id, topic_data in GRAMMAR_TOPICS.items():
            keyboard.append([
                InlineKeyboardButton(
                    topic_data['title'],
                    callback_data=f"module_{module_id}_grammar_{topic_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.extend([
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìù –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –º–æ–¥—É–ª—è {module_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –º–æ–¥—É–ª—è {module_id}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_module_exercises(update: Update, context: CallbackContext, module_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.exercises import EXERCISES
            
            keyboard = []
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            for exercise_type, exercise_data in EXERCISES.items():
                keyboard.append([
                    InlineKeyboardButton(
                        exercise_data['title'],
                        callback_data=f"module_{module_id}_exercise_{exercise_type}_0"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å 0
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.extend([
                [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "‚úçÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è 'School Days'\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –º–æ–¥—É–ª—è {module_id}: {e}")
        if "Message is not modified" not in str(e):
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

async def handle_module_test(update: Update, context: CallbackContext, module_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    query = update.callback_query
    await query.answer()

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è
        if module_id == 1:
            from data.module1.tests import TESTS
        elif module_id == 2:
            from data.module2.tests import TESTS
        elif module_id == 3:
            from data.module3.tests import TESTS
        elif module_id == 4:
            from data.module4.tests import TESTS
        elif module_id == 5:
            from data.module5.tests import TESTS
        elif module_id == 6:
            from data.module6.tests import TESTS
        elif module_id == 7:
            from data.module7.tests import TESTS
        elif module_id == 8:
            from data.module8.tests import TESTS
        else:
            await query.message.edit_text(
                "–¢–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")
                ]])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
        current_question = context.user_data.get(f'test_question_{module_id}', 0)
        
        if current_question >= len(TESTS):
            # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            score = context.user_data.get(f'test_score_{module_id}', 0)
            await query.message.edit_text(
                f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(TESTS)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", 
                        callback_data=f"module_{module_id}_test_restart"),
                    InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", 
                        callback_data=f"module_{module_id}")
                ]])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question_data = TESTS[current_question]
        
        keyboard = []
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        for i, option in enumerate(question_data['options']):
            keyboard.append([
                InlineKeyboardButton(
                    option,
                    callback_data=f"module_{module_id}_test_answer_{current_question}_{i}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.extend([
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"module_{module_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å {current_question + 1}/{len(TESTS)}\n\n"
            f"{question_data['question']}",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ—Å—Ç–∞ –º–æ–¥—É–ª—è {module_id}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_exercise(update: Update, context: CallbackContext, module_id: int, exercise_type: str, exercise_index: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        if module_id == 1:
            from data.module1.exercises import EXERCISES
            
            exercise_data = EXERCISES[exercise_type]
            exercises = exercise_data['exercises']
            
            if exercise_index >= len(exercises):
                exercise_index = 0
                
            exercise = exercises[exercise_index]
            keyboard = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            text = f"üìù {exercise_data['title']}\n"
            text += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise_index + 1} –∏–∑ {len(exercises)}\n\n"
            text += f"‚ùì {exercise['question']}\n\n"
            
            if exercise['type'] == 'choice':
                # –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
                for i, option in enumerate(exercise['options']):
                    keyboard.append([
                        InlineKeyboardButton(
                            option,
                            callback_data=f"module_{module_id}_exercise_{exercise_type}_answer_{exercise_index}_{i}"
                        )
                    ])
            elif exercise['type'] == 'match':
                # –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                text += "üîÑ –°–æ–µ–¥–∏–Ω–∏—Ç–µ –ø–∞—Ä—ã:\n"
                for pair in exercise['pairs']:
                    text += f"‚Ä¢ {pair[0]} - ?\n"
                    
            elif exercise['type'] == 'fill':
                # –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—Å–∫–æ–≤
                text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç"
                context.user_data['expecting_answer'] = {
                    'module': module_id,
                    'type': exercise_type,
                    'index': exercise_index
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if exercise_index > 0:
                nav_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", 
                        callback_data=f"module_{module_id}_exercise_{exercise_type}_{exercise_index-1}")
                )
            if exercise_index < len(exercises) - 1:
                nav_buttons.append(
                    InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", 
                        callback_data=f"module_{module_id}_exercise_{exercise_type}_{exercise_index+1}")
                )
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            keyboard.extend([
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data=f"module_{module_id}_exercises")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        if "Message is not modified" not in str(e):
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

async def handle_exercise_answer(update: Update, context: CallbackContext, module_id: int, exercise_type: str, exercise_index: int, answer: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        if module_id == 1:
            from data.module1.exercises import EXERCISES
            
            exercise_data = EXERCISES[exercise_type]
            exercise = exercise_data['exercises'][exercise_index]
            is_correct = False

            if exercise['type'] == 'choice':
                is_correct = int(answer) == exercise['correct']
            elif exercise['type'] == 'fill':
                is_correct = answer.lower().strip() == exercise['correct'].lower().strip()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
            text += f"üí° {exercise['explanation']}"

            keyboard = []
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if exercise_index < len(exercise_data['exercises']) - 1:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
                        callback_data=f"module_{module_id}_exercise_{exercise_type}_{exercise_index + 1}"
                    )
                ])

            keyboard.extend([
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data=f"module_{module_id}_exercises")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {e}")
        if "Message is not modified" not in str(e):
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )