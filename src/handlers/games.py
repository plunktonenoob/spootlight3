from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import random
import logging
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
import sys
src_path = str(Path(__file__).parent.parent.absolute())
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
from games.memory_game import MemoryGame
from games.word_builder_game import WordBuilderGame
from games.quiz_game import QuizGame
from data.module1.vocabulary import VOCABULARY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

GAMES = {
    'quiz': '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
    'memory': '–ù–∞–π–¥–∏ –ø–∞—Ä—É',
    'word': '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ'
}

async def handle_games(update: Update, context):
    query = update.callback_query
    keyboard = []
    
    for game_id, game_name in GAMES.items():
        keyboard.append([
            InlineKeyboardButton(
                f"üéÆ {game_name}", 
                callback_data=f"game_{game_id}"
            )
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="game_leaderboard"),
            InlineKeyboardButton("üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="game_achievements")
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéÆ –ò–≥—Ä—ã\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=reply_markup
    )

async def start_game(update: Update, context: CallbackContext, game_id: str):
    """–ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å id: {game_id}")

        if game_id == 'memory':
            logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ù–∞–π–¥–∏ –ø–∞—Ä—É'")
            await handle_memory_game(update, context)
        elif game_id == 'word':
            logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ'")
            await handle_word_builder_game(update, context)
        elif game_id == 'quiz':
            logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'")
            await handle_quiz_game(update, context)
        else:
            logger.info(f"–ò–≥—Ä–∞ {game_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            keyboard = [[InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üéÆ {GAMES[game_id]}\n\n"
                "–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã {game_id}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_memory_game(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã '–ù–∞–π–¥–∏ –ø–∞—Ä—É'"""
    query = update.callback_query
    await query.answer()
    
    if 'memory_game' not in context.user_data:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        game = MemoryGame()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        word_pairs = []
        for category in VOCABULARY.values():
            word_pairs.extend([
                {'word': word['word'], 'translation': word['translation']}
                for word in category['words']
            ])
        
        # –í—ã–±–∏—Ä–∞–µ–º 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä
        selected_pairs = random.sample(word_pairs, 6)
        game.initialize_game(selected_pairs)
        context.user_data['memory_game'] = game
    else:
        game = context.user_data['memory_game']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏
    keyboard = []
    current_row = []
    
    for i, card in enumerate(game.cards):
        if card['is_matched']:
            # –î–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–ΩÔøΩÔøΩ—Ö –ø–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚úÖ
            button_text = "‚úÖ"
        elif card['is_flipped']:
            # –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            button_text = card['value']
        else:
            # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º üé¥
            button_text = "üé¥"
        
        current_row.append(InlineKeyboardButton(
            button_text,
            callback_data=f"memory_flip_{i}"
        ))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        if len(current_row) == 3:
            keyboard.append(current_row)
            current_row = []
    
    if current_row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(current_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="memory_new"),
        InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
    ])
    
    game_state = game.get_game_state()
    text = (
        "üéÆ –ù–∞–π–¥–∏ –ø–∞—Ä—É\n\n"
        "–ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—ã: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥\n\n"
        f"–û—á–∫–∏: {game_state['score']}\n"
        f"–•–æ–¥—ã: {game_state['moves']}\n"
        f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {game_state['matched_pairs']}/{game_state['total_pairs']}"
    )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_memory_flip(update: Update, context: CallbackContext, card_index: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get('memory_game')
    if not game:
        await handle_memory_game(update, context)
        return
    
    result = game.flip_card(card_index)
    
    if result['success']:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        await handle_memory_game(update, context)
        
        if result.get('is_pair_complete'):
            # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –¥–≤–µ –∫–∞—Ä—Ç—ã, –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä
            # –∏ –∑–∞—Ç–µ–º –ª–∏–±–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ (–µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏),
            # –ª–∏–±–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            if not result.get('is_match'):
                game.reset_flipped_cards()
                await handle_memory_game(update, context)
            
            if result.get('game_over'):
                # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                final_score = result['final_score']
                keyboard = [[
                    InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="memory_new"),
                    InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
                ]]
                await query.edit_message_text(
                    f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {final_score}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {game.moves}\n\n"
                    "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                ) 

async def handle_word_builder_game(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ'"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ'")
        
        if 'word_builder_game' not in context.user_data:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
            game = WordBuilderGame()
            game.initialize_game()
            context.user_data['word_builder_game'] = game
        else:
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã")
            game = context.user_data['word_builder_game']
        
        game_state = game.get_game_state()
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {game_state}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏
        keyboard = []
        current_row = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–≤—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        for i, letter in enumerate(game_state['shuffled_letters']):
            if i in game_state['selected_letters']:
                # –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä—ã–º
                button_text = f"[{letter.upper()}]"
            else:
                button_text = letter.upper()
            
            current_row.append(InlineKeyboardButton(
                button_text,
                callback_data=f"word_select_{i}"
            ))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –ø–æ 4 –∫–Ω–æ–ø–∫–∏
            if len(current_row) == 4:
                keyboard.append(current_row)
                current_row = []
        
        if current_row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(current_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="word_reset")],
            [
                InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="word_new"),
                InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        text = (
            "üéÆ –°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ\n\n"
            f"–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–∑ {game_state['word_length']} –±—É–∫–≤\n"
            f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game_state['translation']}\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞: {game_state['current_word'].upper() or '...'}\n"
            f"–ü–æ–ø—ã—Ç–∫–∞: {game_state['attempts'] + 1}/{game_state['max_attempts']}\n"
            f"–û—á–∫–∏: {game_state['score']}\n"
            f"–°–æ–±—Ä–∞–Ω–æ —Å–ª–æ–≤: {game_state['words_completed']}"
        )
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ '–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ': {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_word_builder_select(update: Update, context: CallbackContext, letter_index: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã"""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get('word_builder_game')
    if not game:
        await handle_word_builder_game(update, context)
        return
    
    result = game.select_letter(letter_index)
    
    if result['success']:
        if result.get('is_complete'):
            if result['is_correct']:
                # –°–ª–æ–≤–æ —Å–æ–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                await query.answer(
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{result['score']} –æ—á–∫–æ–≤",
                    show_alert=True
                )
            else:
                # –°–ª–æ–≤–æ —Å–æ–±—Ä–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                await query.answer(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {result['attempts_left']}",
                    show_alert=True
                )
                
                if result.get('game_over'):
                    # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                    keyboard = [[
                        InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="word_new"),
                        InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
                    ]]
                    await query.edit_message_text(
                        f"üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"
                        f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {result['final_score']}\n"
                        f"–°–æ–±—Ä–∞–Ω–æ —Å–ª–æ–≤: {result['words_completed']}\n\n"
                        "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await handle_word_builder_game(update, context)

async def handle_quiz_game(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'")
        
        if 'quiz_game' not in context.user_data:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
            game = QuizGame()
            game.initialize_game()
            context.user_data['quiz_game'] = game
        else:
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
            game = context.user_data['quiz_game']
        
        game_state = game.get_game_state()
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {game_state}")
        
        if game_state['game_over']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            keyboard = [[
                InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="quiz_new"),
                InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
            ]]
            
            text = (
                "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {game_state['score']}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {game_state['score'] // 10} –∏–∑ {game_state['total_questions']}\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?"
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            current_question = game_state['current_question']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = []
            for i, option in enumerate(current_question['options']):
                keyboard.append([
                    InlineKeyboardButton(
                        option,
                        callback_data=f"quiz_answer_{i}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="quiz_new"),
                InlineKeyboardButton("üîô –ö –∏–≥—Ä–∞–º", callback_data="games")
            ])
            
            text = (
                "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞\n\n"
                f"–í–æ–ø—Ä–æ—Å {game_state['question_number']}/{game_state['total_questions']}\n\n"
                f"{current_question['text']}\n\n"
                f"–û—á–∫–∏: {game_state['score']}"
            )
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞': {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_quiz_answer(update: Update, context: CallbackContext, answer_index: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    game = context.user_data.get('quiz_game')
    if not game:
        await handle_quiz_game(update, context)
        return
    
    result = game.answer_question(answer_index)
    
    if result['success']:
        if result['is_correct']:
            await query.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
        else:
            await query.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct_answer']}\n{result['explanation']}",
                show_alert=True
            )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await handle_quiz_game(update, context)