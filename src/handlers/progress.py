import json
import os
from typing import Dict, Any
import logging
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
BASE_DIR = Path(__file__).resolve().parent.parent.parent
DATA_DIR = os.path.join(BASE_DIR, "data")
PROGRESS_FILE = os.path.join(DATA_DIR, "user_progress.json")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(DATA_DIR, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(PROGRESS_FILE):
    with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
        json.dump({}, f)

def load_progress() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, 'r', encoding='utf-8') as file:
                return json.load(file)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return {}

def save_progress(progress: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(PROGRESS_FILE, 'w', encoding='utf-8') as file:
            json.dump(progress, file, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def get_user_progress(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    progress = load_progress()
    return progress.get(str(user_id), {})

def update_user_progress(user_id: int, data: Dict[str, Any]) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    progress = load_progress()
    if str(user_id) not in progress:
        progress[str(user_id)] = {}
    progress[str(user_id)].update(data)
    save_progress(progress)

def get_user_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        progress = get_user_progress(user_id)
        name = progress.get('name', '')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è {name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return ''

def save_user_name(user_id: int, name: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ {name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        update_user_progress(user_id, {'name': name})
        logger.info(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

async def handle_progress(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_progress = get_user_progress(user_id)
    user_name = user_progress.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    text = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
    completed_modules = user_progress.get('completed_modules', [])
    text += "üìö –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
    if completed_modules:
        for module in completed_modules:
            text += f"‚úÖ –ú–æ–¥—É–ª—å {module}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = user_progress.get('stats', {})
    text += "\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {stats.get('words_learned', 0)}\n"
    text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {stats.get('exercises_completed', 0)}\n"
    text += f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats.get('tests_completed', 0)}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        if "Message is not modified" not in str(e):
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            ) 