from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from utils.gamification import GamificationManager

PRACTICE_TYPES = {
    'listening': '–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ',
    'speaking': '–ì–æ–≤–æ—Ä–µ–Ω–∏–µ',
    'writing': '–ü–∏—Å—å–º–æ',
    'translation': '–ü–µ—Ä–µ–≤–æ–¥',
    'sentences': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
}

async def handle_practice(update: Update, context):
    query = update.callback_query
    keyboard = []
    
    for practice_id, practice_name in PRACTICE_TYPES.items():
        keyboard.append([
            InlineKeyboardButton(
                f"‚úèÔ∏è {practice_name}", 
                callback_data=f"practice_{practice_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def start_practice_session(update: Update, context, practice_type: str):
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
    task = get_practice_task(practice_type)
    
    keyboard = [
        [
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_task"),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_answer")
        ],
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="practice")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        f"üìù {PRACTICE_TYPES[practice_type]}\n\n"
        f"{task['description']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=reply_markup
    )

async def handle_exercise_completion(update: Update, context, score: int):
    user_id = update.effective_user.id
    gamification = GamificationManager(context.bot_data['db'])
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    xp_result = await gamification.award_xp(user_id, 'exercise_completed')
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç, –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç
    if score == 100:
        perfect_result = await gamification.award_xp(user_id, 'perfect_score')
        xp_result['xp_gained'] += perfect_result['xp_gained']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    new_achievements = await gamification.check_achievements(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    text = f"üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {score}/100\n"
    text += f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{xp_result['xp_gained']} XP\n"
    
    if xp_result['level_up']:
        text += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {xp_result['new_level']}!\n"
    
    if new_achievements:
        text += "\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in new_achievements:
            text += f"- {achievement['name']}: {achievement['description']}\n"
    
    await update.callback_query.edit_message_text(text) 